// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nrpc/nrpc.proto

/*
Package nrpc is a generated protocol buffer package.

It is generated from these files:
	nrpc/nrpc.proto

It has these top-level messages:
	Error
	Void
	NoRequest
	NoReply
	HeartBeat
*/
package nrpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SubjectRule int32

const (
	SubjectRule_COPY    SubjectRule = 0
	SubjectRule_TOLOWER SubjectRule = 1
)

var SubjectRule_name = map[int32]string{
	0: "COPY",
	1: "TOLOWER",
}
var SubjectRule_value = map[string]int32{
	"COPY":    0,
	"TOLOWER": 1,
}

func (x SubjectRule) String() string {
	return proto.EnumName(SubjectRule_name, int32(x))
}
func (SubjectRule) EnumDescriptor() ([]byte, []int) { return fileDescriptorNrpc, []int{0} }

type Error_Type int32

const (
	Error_CLIENT        Error_Type = 0
	Error_SERVER        Error_Type = 1
	Error_EOS           Error_Type = 3
	Error_SERVERTOOBUSY Error_Type = 4
)

var Error_Type_name = map[int32]string{
	0: "CLIENT",
	1: "SERVER",
	3: "EOS",
	4: "SERVERTOOBUSY",
}
var Error_Type_value = map[string]int32{
	"CLIENT":        0,
	"SERVER":        1,
	"EOS":           3,
	"SERVERTOOBUSY": 4,
}

func (x Error_Type) String() string {
	return proto.EnumName(Error_Type_name, int32(x))
}
func (Error_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorNrpc, []int{0, 0} }

type Error struct {
	Type     Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=nrpc.Error_Type" json:"type,omitempty"`
	Message  string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MsgCount uint32     `protobuf:"varint,3,opt,name=msgCount,proto3" json:"msgCount,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorNrpc, []int{0} }

func (m *Error) GetType() Error_Type {
	if m != nil {
		return m.Type
	}
	return Error_CLIENT
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetMsgCount() uint32 {
	if m != nil {
		return m.MsgCount
	}
	return 0
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptorNrpc, []int{1} }

type NoRequest struct {
}

func (m *NoRequest) Reset()                    { *m = NoRequest{} }
func (*NoRequest) ProtoMessage()               {}
func (*NoRequest) Descriptor() ([]byte, []int) { return fileDescriptorNrpc, []int{2} }

type NoReply struct {
}

func (m *NoReply) Reset()                    { *m = NoReply{} }
func (*NoReply) ProtoMessage()               {}
func (*NoReply) Descriptor() ([]byte, []int) { return fileDescriptorNrpc, []int{3} }

type HeartBeat struct {
	Lastbeat bool `protobuf:"varint,1,opt,name=lastbeat,proto3" json:"lastbeat,omitempty"`
}

func (m *HeartBeat) Reset()                    { *m = HeartBeat{} }
func (*HeartBeat) ProtoMessage()               {}
func (*HeartBeat) Descriptor() ([]byte, []int) { return fileDescriptorNrpc, []int{4} }

func (m *HeartBeat) GetLastbeat() bool {
	if m != nil {
		return m.Lastbeat
	}
	return false
}

var E_PackageSubject = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50000,
	Name:          "nrpc.packageSubject",
	Tag:           "bytes,50000,opt,name=packageSubject",
	Filename:      "nrpc/nrpc.proto",
}

var E_PackageSubjectParams = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         50001,
	Name:          "nrpc.packageSubjectParams",
	Tag:           "bytes,50001,rep,name=packageSubjectParams",
	Filename:      "nrpc/nrpc.proto",
}

var E_ServiceSubjectRule = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*SubjectRule)(nil),
	Field:         50002,
	Name:          "nrpc.serviceSubjectRule",
	Tag:           "varint,50002,opt,name=serviceSubjectRule,enum=nrpc.SubjectRule",
	Filename:      "nrpc/nrpc.proto",
}

var E_MethodSubjectRule = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*SubjectRule)(nil),
	Field:         50003,
	Name:          "nrpc.methodSubjectRule",
	Tag:           "varint,50003,opt,name=methodSubjectRule,enum=nrpc.SubjectRule",
	Filename:      "nrpc/nrpc.proto",
}

var E_ServiceSubject = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51000,
	Name:          "nrpc.serviceSubject",
	Tag:           "bytes,51000,opt,name=serviceSubject",
	Filename:      "nrpc/nrpc.proto",
}

var E_ServiceSubjectParams = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         51001,
	Name:          "nrpc.serviceSubjectParams",
	Tag:           "bytes,51001,rep,name=serviceSubjectParams",
	Filename:      "nrpc/nrpc.proto",
}

var E_MethodSubject = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         52000,
	Name:          "nrpc.methodSubject",
	Tag:           "bytes,52000,opt,name=methodSubject",
	Filename:      "nrpc/nrpc.proto",
}

var E_MethodSubjectParams = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         52001,
	Name:          "nrpc.methodSubjectParams",
	Tag:           "bytes,52001,rep,name=methodSubjectParams",
	Filename:      "nrpc/nrpc.proto",
}

var E_StreamedReply = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52002,
	Name:          "nrpc.streamedReply",
	Tag:           "varint,52002,opt,name=streamedReply",
	Filename:      "nrpc/nrpc.proto",
}

func init() {
	proto.RegisterType((*Error)(nil), "nrpc.Error")
	proto.RegisterType((*Void)(nil), "nrpc.Void")
	proto.RegisterType((*NoRequest)(nil), "nrpc.NoRequest")
	proto.RegisterType((*NoReply)(nil), "nrpc.NoReply")
	proto.RegisterType((*HeartBeat)(nil), "nrpc.HeartBeat")
	proto.RegisterEnum("nrpc.SubjectRule", SubjectRule_name, SubjectRule_value)
	proto.RegisterEnum("nrpc.Error_Type", Error_Type_name, Error_Type_value)
	proto.RegisterExtension(E_PackageSubject)
	proto.RegisterExtension(E_PackageSubjectParams)
	proto.RegisterExtension(E_ServiceSubjectRule)
	proto.RegisterExtension(E_MethodSubjectRule)
	proto.RegisterExtension(E_ServiceSubject)
	proto.RegisterExtension(E_ServiceSubjectParams)
	proto.RegisterExtension(E_MethodSubject)
	proto.RegisterExtension(E_MethodSubjectParams)
	proto.RegisterExtension(E_StreamedReply)
}
func (this *Error) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Error")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Error but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Error but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if this.MsgCount != that1.MsgCount {
		return fmt.Errorf("MsgCount this(%v) Not Equal that(%v)", this.MsgCount, that1.MsgCount)
	}
	return nil
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.MsgCount != that1.MsgCount {
		return false
	}
	return true
}
func (this *Void) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Void)
	if !ok {
		that2, ok := that.(Void)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Void")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Void but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Void but is not nil && this == nil")
	}
	return nil
}
func (this *Void) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Void)
	if !ok {
		that2, ok := that.(Void)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *NoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NoRequest)
	if !ok {
		that2, ok := that.(NoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NoRequest but is not nil && this == nil")
	}
	return nil
}
func (this *NoRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NoRequest)
	if !ok {
		that2, ok := that.(NoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *NoReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NoReply)
	if !ok {
		that2, ok := that.(NoReply)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NoReply")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NoReply but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NoReply but is not nil && this == nil")
	}
	return nil
}
func (this *NoReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NoReply)
	if !ok {
		that2, ok := that.(NoReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *HeartBeat) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HeartBeat)
	if !ok {
		that2, ok := that.(HeartBeat)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HeartBeat")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HeartBeat but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HeartBeat but is not nil && this == nil")
	}
	if this.Lastbeat != that1.Lastbeat {
		return fmt.Errorf("Lastbeat this(%v) Not Equal that(%v)", this.Lastbeat, that1.Lastbeat)
	}
	return nil
}
func (this *HeartBeat) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HeartBeat)
	if !ok {
		that2, ok := that.(HeartBeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Lastbeat != that1.Lastbeat {
		return false
	}
	return true
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nrpc.Error{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "MsgCount: "+fmt.Sprintf("%#v", this.MsgCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Void) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&nrpc.Void{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&nrpc.NoRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NoReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&nrpc.NoReply{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartBeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nrpc.HeartBeat{")
	s = append(s, "Lastbeat: "+fmt.Sprintf("%#v", this.Lastbeat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNrpc(dAtA, i, uint64(m.Type))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNrpc(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.MsgCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNrpc(dAtA, i, uint64(m.MsgCount))
	}
	return i, nil
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lastbeat {
		dAtA[i] = 0x8
		i++
		if m.Lastbeat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Nrpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Nrpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNrpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedError(r randyNrpc, easy bool) *Error {
	this := &Error{}
	this.Type = Error_Type([]int32{0, 1, 3, 4}[r.Intn(4)])
	this.Message = string(randStringNrpc(r))
	this.MsgCount = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVoid(r randyNrpc, easy bool) *Void {
	this := &Void{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNoRequest(r randyNrpc, easy bool) *NoRequest {
	this := &NoRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNoReply(r randyNrpc, easy bool) *NoReply {
	this := &NoReply{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHeartBeat(r randyNrpc, easy bool) *HeartBeat {
	this := &HeartBeat{}
	this.Lastbeat = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyNrpc interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNrpc(r randyNrpc) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNrpc(r randyNrpc) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneNrpc(r)
	}
	return string(tmps)
}
func randUnrecognizedNrpc(r randyNrpc, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNrpc(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNrpc(dAtA []byte, r randyNrpc, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNrpc(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateNrpc(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateNrpc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNrpc(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNrpc(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNrpc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNrpc(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovNrpc(uint64(m.Type))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNrpc(uint64(l))
	}
	if m.MsgCount != 0 {
		n += 1 + sovNrpc(uint64(m.MsgCount))
	}
	return n
}

func (m *Void) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NoRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NoReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HeartBeat) Size() (n int) {
	var l int
	_ = l
	if m.Lastbeat {
		n += 2
	}
	return n
}

func sovNrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNrpc(x uint64) (n int) {
	return sovNrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`MsgCount:` + fmt.Sprintf("%v", this.MsgCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Void) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Void{`,
		`}`,
	}, "")
	return s
}
func (this *NoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NoRequest{`,
		`}`,
	}, "")
	return s
}
func (this *NoReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NoReply{`,
		`}`,
	}, "")
	return s
}
func (this *HeartBeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartBeat{`,
		`Lastbeat:` + fmt.Sprintf("%v", this.Lastbeat) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Error_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCount", wireType)
			}
			m.MsgCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastbeat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lastbeat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNrpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nrpc/nrpc.proto", fileDescriptorNrpc) }

var fileDescriptorNrpc = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xee, 0xfd, 0x92, 0x5f, 0x93, 0xbc, 0x55, 0x83, 0x7b, 0x74, 0x88, 0x2a, 0x74, 0x44, 0x56,
	0x25, 0x22, 0xa4, 0x3a, 0x52, 0xd9, 0xcc, 0xd6, 0x2a, 0x15, 0x95, 0x4a, 0x5d, 0x5d, 0xd2, 0xa2,
	0xb2, 0xa0, 0x8b, 0x73, 0xb8, 0x86, 0x38, 0x67, 0xec, 0x33, 0x52, 0x37, 0xa6, 0x8e, 0x1d, 0xbb,
	0xf2, 0x67, 0xe2, 0x23, 0x94, 0x8d, 0x91, 0xb1, 0xc0, 0xc2, 0xd8, 0xf8, 0x13, 0x30, 0x32, 0xa2,
	0x3b, 0x27, 0xa5, 0x26, 0x81, 0xb0, 0x58, 0xf7, 0xbc, 0xf7, 0x3e, 0xcf, 0xfb, 0xdc, 0x73, 0xd6,
	0xc1, 0x8d, 0x41, 0x14, 0xba, 0x4d, 0xf5, 0xb1, 0xc2, 0x48, 0x48, 0x81, 0x8b, 0x6a, 0xbd, 0x52,
	0xf7, 0x84, 0xf0, 0xfa, 0xbc, 0xa9, 0x6b, 0xdd, 0xe4, 0x69, 0xb3, 0xc7, 0x63, 0x37, 0xf2, 0x43,
	0x29, 0xa2, 0xac, 0x6f, 0x65, 0xcd, 0xf3, 0xe5, 0x51, 0xd2, 0xb5, 0x5c, 0x11, 0x34, 0x3d, 0xe1,
	0x89, 0x5f, 0xad, 0x0a, 0x69, 0xa0, 0x57, 0x59, 0xbb, 0xf9, 0x1a, 0xc1, 0xff, 0xad, 0x28, 0x12,
	0x11, 0x5e, 0x85, 0xa2, 0x3c, 0x0e, 0x79, 0x0d, 0xd5, 0x51, 0xa3, 0xba, 0x6e, 0x58, 0x7a, 0xb6,
	0xde, 0xb2, 0x3a, 0xc7, 0x21, 0xa7, 0x7a, 0x17, 0xd7, 0xa0, 0x14, 0xf0, 0x38, 0x66, 0x1e, 0xaf,
	0xfd, 0x57, 0x47, 0x8d, 0x0a, 0x1d, 0x43, 0xbc, 0x02, 0xe5, 0x20, 0xf6, 0x36, 0x45, 0x32, 0x90,
	0xb5, 0x42, 0x1d, 0x35, 0x16, 0xe9, 0x15, 0x36, 0x6d, 0x28, 0x2a, 0x0d, 0x0c, 0x30, 0xbf, 0xb9,
	0xb3, 0xdd, 0xda, 0xed, 0x18, 0x73, 0x6a, 0xdd, 0x6e, 0xd1, 0x83, 0x16, 0x35, 0x10, 0x2e, 0x41,
	0xa1, 0xe5, 0xb4, 0x8d, 0x02, 0x5e, 0x82, 0xc5, 0xac, 0xd8, 0x71, 0x9c, 0x8d, 0xfd, 0xf6, 0xa1,
	0x51, 0x34, 0xe7, 0xa1, 0x78, 0x20, 0xfc, 0x9e, 0xb9, 0x00, 0x95, 0x5d, 0x41, 0xf9, 0x8b, 0x84,
	0xc7, 0xd2, 0xac, 0x40, 0x49, 0x81, 0xb0, 0x7f, 0x6c, 0xde, 0x81, 0xca, 0x03, 0xce, 0x22, 0xb9,
	0xc1, 0x99, 0x54, 0x26, 0xfa, 0x2c, 0x96, 0x5d, 0xce, 0xa4, 0x3e, 0x48, 0x99, 0x5e, 0xe1, 0xbb,
	0xab, 0xb0, 0xd0, 0x4e, 0xba, 0xcf, 0xb8, 0x2b, 0x69, 0xd2, 0xe7, 0xb8, 0x0c, 0xc5, 0x4d, 0x67,
	0xef, 0xd0, 0x98, 0xc3, 0x0b, 0x50, 0xea, 0x38, 0x3b, 0xce, 0x23, 0x65, 0xc5, 0xde, 0x82, 0x6a,
	0xc8, 0xdc, 0xe7, 0xcc, 0xe3, 0xa3, 0x66, 0x7c, 0xcb, 0xca, 0x42, 0xb7, 0xc6, 0x49, 0x5a, 0x5b,
	0x7e, 0x9f, 0x3b, 0xa1, 0xf4, 0xc5, 0x20, 0xae, 0x5d, 0x9c, 0x14, 0x74, 0x0e, 0xbf, 0xb1, 0x6c,
	0x0a, 0xcb, 0xf9, 0xca, 0x1e, 0x8b, 0x58, 0x10, 0xcf, 0x50, 0xfb, 0x7c, 0x52, 0xa8, 0x17, 0x1a,
	0x15, 0x3a, 0x95, 0x6b, 0x33, 0xc0, 0x31, 0x8f, 0x5e, 0xfa, 0x2e, 0xbf, 0x7e, 0x90, 0xbf, 0x2b,
	0x7e, 0xd1, 0xfe, 0xaa, 0xeb, 0x4b, 0xd9, 0x85, 0x5e, 0x23, 0xd2, 0x29, 0x62, 0xf6, 0x13, 0x58,
	0x0a, 0xb8, 0x3c, 0x12, 0xbd, 0x7f, 0x9f, 0xf0, 0xf5, 0xcf, 0x13, 0x26, 0xb5, 0xec, 0x6d, 0xa8,
	0xe6, 0xc7, 0xe2, 0xdb, 0x13, 0xea, 0xed, 0xac, 0x61, 0x3c, 0xe0, 0xfc, 0x74, 0x14, 0x71, 0x9e,
	0x68, 0xef, 0xc3, 0x72, 0xbe, 0x32, 0x8a, 0x78, 0xa6, 0xe0, 0x87, 0xd3, 0x51, 0xca, 0xd3, 0xe8,
	0xf6, 0x16, 0x2c, 0xe6, 0x6c, 0x63, 0x32, 0xa1, 0xf7, 0x50, 0xef, 0x8f, 0xe5, 0xde, 0x9c, 0x65,
	0xfe, 0xf2, 0x34, 0x9b, 0xc2, 0xcd, 0x5c, 0x61, 0xe4, 0x6e, 0x96, 0xda, 0xdb, 0xb3, 0xcc, 0xdc,
	0x34, 0xb2, 0xf2, 0x16, 0xcb, 0x88, 0xb3, 0x80, 0xf7, 0xf4, 0xdf, 0x3f, 0x53, 0xed, 0x9d, 0xf6,
	0x56, 0xa6, 0x79, 0xda, 0xc6, 0xde, 0xb7, 0x21, 0x99, 0xbb, 0x1c, 0x12, 0xf4, 0x7d, 0x48, 0xd0,
	0x8f, 0x21, 0x41, 0xaf, 0x52, 0x82, 0xde, 0xa7, 0x04, 0x9d, 0xa7, 0x04, 0x7d, 0x4c, 0x09, 0xfa,
	0x94, 0x12, 0x74, 0x91, 0x12, 0x74, 0x99, 0x12, 0xf4, 0xd8, 0xbc, 0xf6, 0xa6, 0x0c, 0x98, 0x8c,
	0xd7, 0xd4, 0xdb, 0xa4, 0x1e, 0x91, 0x35, 0x75, 0xe3, 0xf7, 0xd5, 0xa7, 0x3b, 0xaf, 0x0d, 0xdc,
	0xfb, 0x19, 0x00, 0x00, 0xff, 0xff, 0xce, 0xdb, 0x60, 0x96, 0xb9, 0x04, 0x00, 0x00,
}
